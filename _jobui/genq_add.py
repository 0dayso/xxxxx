#!/usr/bin/env python
# -*- coding:utf8 -*-

import os
import sys

import spider
from spider.savebin import FileSaver
from spider.genquery import GenQueries, GQDataHelper
import re
from lxml import html
import time
from decimal import *

#来源网站
domain = [["河南九博人才网"],["前程无忧"],["中华英才网"],["我的工作网"],["百才招聘网"],["纳杰人才网"],["卓博人才网"],["赶集网"],["一览英才网"],["河北搜才网"],["597厦门人才网"],["智联招聘网"],["重庆人才网"],["富海人才网"],["海峡人才网"],["泉州人才网"],["百城招聘"],["中国汽车人才网"],["英才网联"],["爱聘才"],["百大英才网"],["中国服装人才网"],["最佳东方"],["中国医疗人才网"],["温州人才网"],["拉勾网"],["中国印刷人才网"],["厦门人才网"],["深圳人才网"],["武汉CC人才网"],["猎聘网"],["智通人才网"],["江西人才人事网"],["北极星电力招聘网"],["广州人才网"],["杭州人才网"],["百业招聘网"],["中国人才热线"],["珠三角人才网"],["河北人才网"],["北极星煤炭招聘网"],["南方人才网"],["拉钩网"],["中国俊才网"],["宿迁人才网"],["中国教师人才网"],["桂聘人才网"],["三亚人才网"],["浙江人才网"],["应届毕业生"],["CG招聘网"],["36人才"],["58同城"],["建筑英才网"],["北极星电气招聘网"],["无锡纳才网"],["湖南人才网"],["姑苏人才网"],["中国PEOPLE258人才网"],["化工英才网"],["i企信"],["中国建筑人才网"],["常州人才网"],["域聘网"],["万行教师人才网"],["丁香人才"],["医药英才网"],["海南英才网"],["内推网"],["北极星风电招聘网"],["宜春人才网"],["泉州人才市场"],["北极星LED招聘网"],["南通人才网"],["云南招聘网"],["北极星光伏招聘网"],["中国皮革人才网"],["海曙人才网"],["东莞人才招聘网"],["中国外语人才网"],["597金华人才网"],["快捷人才网"],["服装英才网"],["莆田人才网"],["北极星工程招聘网"],["北极星水电招聘网"],["北极星节能环保招聘网"],["中国汉中人才网"],["中国鞋业网"],["江苏人事人才网"],["徐州英才网"],["中国美容人才热线"],["建筑英才网（英才网联）"],["广东人才网(深圳)"],["化工英才网（英才网联）"],["万行医疗卫生人才网"],["张家口人才网"],["乐清58招聘"],["博思人才网"],["人才通"],["舟山人才网"],["北极星火电招聘网"],["线缆招聘网"],["衡水人才网"],["新世纪人才网"],["梅州人才网"],["电梯招聘网"],["鹏程万里"],["来就业"],["美容精英网"],["医药英才网（英才网联）"],["商丘人才网"],["杭州招聘网"],["云企招聘网"],["濮阳人才网"],["外企人才网"],["常州招聘网"],["临沂在线人才频道"],["无锡聚才网"],["烟台招聘网"],["恒信人才网"],["西子人才网"],["九江人才网"],["时尚行业人士工作网"],["成功招聘网"],["福州多才网"],["江汉人才网 "],["派代电商"],["恩施人才网"],["江海人才网"],["镇江人才热线"],["韶州人才网"],["淄博信息港"],["碧海银沙"],["时尚招聘网"],["新乡人才网"],["荆门人才网"],["洛阳人才网"],["德州人才网"],["孝感人才网"],["揭阳人才网"],["温州人才招聘网"],["千里马人才网"],["泰州人才网"],["苏州人才网"],["中国鞋业人才网"],["中国旅游人才网"],["凯业必达"],["萧山人才网"],["连云港人才网"],["荷泽人才网"],["南阳E动人才网"],["仙桃人才网"],["江苏人才热线"],["余杭人才网"],["南京人事人才网"],["上饶招聘网"],["安阳人才网"],["联英人才网"],["国际人才网"],["茂名招聘网"],["059精才网"],["兼客"],["亿搜人才网"],["茂名人才网"],["滨州人才网"],["随州人才网"],["潮州人才网"],["温州招聘网"],["咸宁人才网"],["赣州人事人才网"],["漯河人才网"],["理想家具鞋业人才招聘网"],["开源中国招聘"],["尚班族"],["百姓兼职"],["霞浦搜才网"],["百川人才网"],["天天职场"],["长春人才网"],["1010兼职网"],["象山人才网"],["济源就业服务网"],[""],["阳江英才网"],["天中人才市场"],["潍坊志向人才网"],["淮安人才热线"],["兼职猫"],["潜江人才网 "],["若邻网"],["豫南信阳人才网"],["徐才网"],["福建人才网"],["陕西人才网"],["百姓网"],["筑龙英才网"],["石狮人才网"],["272招聘网"],["江门招聘网"],["中山人才网"],["东莞人才网"],["汕头招聘网"],["佛山人才网"],["微求职"],["威海人才网"],["易搜人才网"],["皮革人才网"],["深圳招聘网"],["汕尾招聘网"],["湛江招聘网"],["惠州人才网"],["梅州招聘网"],["广东人才网"],["中国电力人才网"],["韶关招聘网"],["成都我的工作网"],["齐鲁人才热线"],["华西人才网"],["卓比人才网"],["钱江人才热线"],["中州人才网"],["江淮人才热线"],["首都人才热线"],["燕赵人才热线"],["扬子人才热线"],["赣江人才网"],["大上海人才热线"],["百姓网（印象抓取）"],["健康英才网"],["广州博才网"],["房产英才网"],["锅炉英才网"],["五金英才网"],["电梯英才网"],["数控英才网"],["安防英才网"],["机电英才网"],["泵阀英才网"],["照明英才网"],["数字英才网"],["土木英才网"],["水利英才网"],["仪器英才网"],["电力英才网"],["物流英才网"],["环保英才网"],["北京我的工作网"],["天府人才网"],["592招聘"],["新安人才网"],["钢铁英才网"],["大泉州人才网"],["玻璃英才网"],["橡胶英才网"],["玩具英才网"],["设计英才网"],["眼镜英才网"],["水务英才网"],["暖通英才网"],["佳才网"],["山东人才市场"],["中国化工招聘网"],["天基人才网(河南)"],["北极星电力英才网"],["泰达人才网"],["568人才"],["中国打工网"],["西安市人才网"],["1"],["中华人才热线"],["智海人才网"],["中劳网"],["东营人才招聘网"],["无锡人才网"],["珠三角联合人才网"],["江门人才网"],["上海第一招聘网"],["天津北方人才网"],["征才网"],["一网人才"],["斗米兼职"],["湖州人才招聘网"],["福州人才网"],["青岛，我的工作网"],["中国三和招聘网"],["百伯"],["秦皇岛人才网"],["电源英才网"],["广西人才网"],["创富人才网"],["船舶英才网"],["电池英才网"],["枣庄人才招聘网"],["津轻人才网"],["模具英才网"],["贸易英才网"],["山东人才网"],["冶金英才网"],["理想人才网"],["汽车英才网"],["万行人才网"],["津门人才热线"],["山城人才网"],["珠江人才热线"],["IT英才网"],["荆楚人才网"],["辽宁人才热线"],["长沙人才网"],["广东应届生求职网"],["晋商人才网"],["淮安人才招聘网"],["机床英才网"],["美容求职网"],["中国就业网"],["汽配英才网"],["轴承英才网"],["中国家具招聘网"],["南京招聘网"],["528招聘网"],["上海人才热线"],["闽江人才热线"],["中国船舶英才网"],["电机英才网"],["时尚工作网"],["福瑞医生人才网"],["惠州人才热线"],["昆明人才市场"],["阿里招聘"],["资阳人才招聘网"],["莱芜人才招聘网"],["八方人才网"],["关中人才网"],["吉林伍亿人才网"],["首都人才网"],["中国模具人才网"],["江西人才网"],["医疗专业人才网"],["黑龙江伍亿人才网"],["中国国家人才"],["物流招聘网"],["潇湘人才网"],["IT百才网"],["58同城网"],["漳州人才招聘网"],["JJR（中国家具招聘网）"],["萍乡人才招聘网"],["云滇人才网"],["58同城网-兼职"],["吉安人事人才网"],["中国第一鞋服人才网"],["淮北人才招聘网"],["重庆人才公共信息网"],["传媒英才网"],["临汾人才招聘网"],["二泉人才网"],["中华人才网"],["同城网"],["武清人才网"],["马鞍山人才招聘网"],["辽宁人才在线"],["连云港人才招聘网"],["深圳英才网"],["中国照明人才网"],["易才网"],["无锡人才招聘网"],["路桥英才网"],["重庆英才网"],["贵黔人才网"],["中国光电人才网"],["宁波人才网"],["消防英才网"],["中国涂料人才网"],["人才新干线"],["清远人才招聘网"],["阳江人才招聘网"],["建筑人才网联"],["云南人才市场"],["segmentfault招聘"]]

#公司性质
companyType = GQDataHelper.qlist("其他性质","民营企业","外资","合资","国企","事业单位","国家机关")
#学历要求
degreeType = GQDataHelper.qlist("初中","高中","中技","中专","大专","本科","硕士","博士","不限学历")
#工作经验
experienceType = GQDataHelper.qlist("应届毕业生","0-2年","3-5年","6-7年","8-10年","不限经验")
#行业类型
industry = GQDataHelper.qlist("快速消费品(食品、饮料、化妆品)","贸易/进出口","互联网/电子商务","电子技术/半导体/集成电路","专业服务(咨询、人力资源、财会)","计算机软件","新能源" ,"批发/零售","服装/纺织/皮革","汽车及零配件","金融/投资/证券","外包服务","制药/生物工程","房地产" ,"交通/运输/物流","教育/培训/院校","机械/设备/重工","家具/家电/玩具/礼品","中介服务","通信/电信/网络设备")
#职位类型
jobType = GQDataHelper.qlist("全职","兼职","临时","实习","不限职位")
#薪酬水平
payType = GQDataHelper.qlist("2000以下","2000-2999","3000-4499","4500-5999","6000-7999","8000-9999","10000-14999","15000-19999","20000-29999","30000-49999","面议")
#地域
cityKw = [["深圳"],["广州"],["东莞"],["佛山"],["惠州"],["中山"],["珠海"],["江门"],["汕头"],["揭阳"],["潮州"],["湛江"],["清远"],["肇庆"],["阳江"],["茂名"],["河源"],["韶关"],["梅州"],["汕尾"],["云浮"],["合肥"],["芜湖"],["蚌埠"],["马鞍山"],["滁州"],["六安"],["阜阳"],["安庆"],["宿州"],["黄山"],["宣城"],["淮南"],["亳州"],["淮北"],["铜陵"],["池州"],["巢湖厦门"],["福州"],["泉州"],["漳州"],["莆田"],["宁德"],["龙岩"],["南平"],["三明"],["兰州"],["天水"],["酒泉"],["武威"],["白银"],["庆阳"],["张掖"],["陇南"],["平凉"],["name"],["'i'"],["is"],["not"],["defined定西"],["金昌"],["嘉峪关"],["甘南"],["临夏"],["南宁"],["柳州"],["桂林"],["北海"],["钦州"],["玉林"],["梧州"],["贵港"],["防城港"],["百色"],["贺州"],["河池"],["崇左"],["来宾"],["贵阳"],["遵义"],["毕节"],["六盘水"],["铜仁"],["安顺"],["黔南"],["黔西"],["黔东"],["三亚"],["海口"],["石家庄"],["保定"],["廊坊"],["唐山"],["张家口"],["衡水"],["邢台"],["秦皇岛"],["邯郸"],["沧州"],["承德"],["哈尔滨"],["大庆"],["齐齐哈尔"],["佳木斯"],["牡丹江"],["绥化"],["双鸭山"],["鸡西"],["鹤岗"],["七台河"],["伊春"],["黑河"],["大兴安岭"],["郑州"],["洛阳"],["新乡"],["南阳"],["信阳"],["驻马店"],["安阳"],["开封"],["许昌"],["漯河"],["焦作"],["平顶山"],["商丘"],["周口"],["濮阳"],["鹤壁"],["济源"],["三门峡"],["武汉"],["黄石"],["宜昌"],["仙桃"],["荆州"],["孝感"],["咸宁"],["荆门"],["恩施"],["黄冈"],["十堰"],["随州"],["鄂州"],["潜江"],["天门"],["襄樊"],["长沙"],["湘潭"],["株洲"],["郴州"],["衡阳"],["常德"],["岳阳"],["益阳"],["邵阳"],["永州"],["娄底"],["怀化"],["张家界"],["湘西"],["南京"],["苏州"],["无锡"],["常州"],["南通"],["镇江"],["宿迁"],["徐州"],["扬州"],["连云港"],["盐城"],["泰州"],["淮安"],["南昌"],["景德镇"],["九江"],["赣州"],["宜春"],["上饶"],["萍乡"],["鹰潭"],["吉安"],["抚州"],["新余"],["长春"],["吉林"],["松原"],["四平"],["延边"],["白山"],["通化"],["辽源"],["白城"],["朝阳"],["沈阳"],["大连"],["鞍山"],["营口"],["抚顺"],["盘锦"],["丹东"],["锦州"],["铁岭"],["辽阳"],["阜新"],["本溪"],["葫芦岛"],["呼和浩特"],["包头"],["鄂尔多斯"],["赤峰"],["通辽"],["兴安"],["锡林郭勒"],["呼伦贝尔"],["乌海"],["乌兰察布"],["巴彦淖尔"],["阿拉善"],["银川"],["吴忠"],["石嘴山"],["中卫"],["固原"],["海南"],["西宁"],["海西"],["海东"],["海北"],["玉树"],["青岛"],["济南"],["烟台"],["菏泽"],["潍坊"],["临沂"],["淄博"],["威海"],["济宁"],["东营"],["滨州"],["泰安"],["德州"],["聊城"],["日照"],["枣庄"],["莱芜"],["西安"],["汉中"],["咸阳"],["宝鸡"],["渭南"],["榆林"],["延安"],["安康"],["商洛"],["铜川"],["太原"],["大同"],["晋中"],["运城"],["临汾"],["长治"],["晋城"],["吕梁"],["忻州"],["朔州"],["阳泉"],["成都"],["绵阳"],["德阳"],["南充"],["泸州"],["乐山"],["眉山"],["宜宾"],["广元"],["遂宁"],["广安"],["内江"],["达州"],["自贡"],["巴中"],["攀枝花"],["雅安"],["资阳"],["凉山"],["阿坝"],["甘孜"],["乌鲁木齐"],["昌吉"],["巴音郭楞"],["哈密"],["喀什"],["克拉玛依"],["阿克苏"],["吐鲁番"],["伊犁"],["和田"],["阿勒泰"],["石河子"],["山南"],["拉萨"],["日喀则"],["昆明"],["大理"],["楚雄"],["文山"],["曲靖"],["红河"],["玉溪"],["丽江"],["西双版纳"],["昭通"],["普洱"],["保山"],["临沧"],["德宏"],["迪庆"],["怒江"],["杭州"],["宁波"],["温州"],["金华"],["嘉兴"],["台州"],["绍兴"],["湖州"],["舟山"],["衢州"],["丽水"]]

def parseInt(s):
    m = re.match("\s*([0-9]+)", s)
    if m:
        return int(m.group(1))
    raise ValueError("invalid string %s to int" % s)


class GenJobQuery(GenQueries):
    def __init__(self,thcnt):
        GenQueries.__init__(self,thcnt)
        self.thread_count = 1
        self._name = "jobui_queries"
        self.no_match_url = FileSaver("not_match_%s.txt" % self._name)
        self.bs2 = FileSaver("failed_urls.txt")
        self.job_url = FileSaver("job_url.txt")
        self.cnt = 0
        self.domains = FileSaver("domains.txt")
        self.start_time = time.time()

    def init_conditions(self):
        #ALL=3277369
        GQDataHelper.add(self, 'companyType', companyType) #0    0
        GQDataHelper.add(self, 'degreeType', degreeType) #13    0.000003966596376544722306215748059
        GQDataHelper.add(self, 'jobType', jobType) #2329  0.0007106309969978967885520367099
        GQDataHelper.add(self, 'domain',domain) #0.01408784246034669669827704161
        GQDataHelper.add(self, 'experienceType', experienceType) #13031   0.003976055183288790490176724073
        GQDataHelper.add(self, 'payType', payType) #20364  0.006213520662458209618752114882
        #GQDataHelper.add(self, 'industry', industry) #543911  0.1659596462894474195612395187
        #GQDataHelper.add(self, 'cityKw', cityKw) # 2090931 0.6379907175542332889583077157


    def need_split(self, params, level, islast):
        url = self.gen_url(params)
        con = self.request_url(url)
        time.sleep(0.6)
        if con is not None:
            m = re.search(ur'<small class="info">&nbsp;（(\d+) 条信息）</small>',con.text)
            if m:
                found = m.group(1).encode('utf-8')
                count = parseInt(found)
                # if self.cnt == 0:
                #     self.cnt = count
                # else:
                #     self.test += count

                with self.locker:
                    print "[%d] %s ==> %s %s" % (level, url, found, 'failed' if (count >= 1000) else '')
                if parseInt(found) > 1000:
                    print 'get count == ',found
                    return True
                else:
                    print 'get count == ',found
                    print '======NO SPILT======',url
                    fori = count/50 if count%50==0 else (count/50+1)
                    i = 1
                    while i<=fori:
                        if i == 1:
                            cnt = self.parseUrl(con.text)
                            if cnt == 0:
                                self.re_req(url,0)
                        else:
                            reurl = url+"&n="+str(i)
                            self.re_req(reurl,0)
                        i+=1
                    return False
            elif con.text.__contains__(ur'暂时没有最新信息了，你可以通过选择下面类别关键词进行搜索'):
                self.no_match_url.append(url)
                print '------NO MATCH------',url
                return False
        # else:
        #     self.need_split(params,level,islast)
        with self.locker:
            self.bs2.append("==failed get con: %s====" % url)
            print "~~~~~~RESULT NONE~~~~~~",url
        return False

    def re_req(self,url,retry):
        if retry < 10:
            con = self.request_url(url)
            if con is not None:
                count = self.parseUrl(con.text)
                if count == 0:
                    retry+=1
                    time.sleep(0.5)
                    self.re_req(url,retry)
            else:
                print "None-------url=[%s],retry=[%d]"%(url,retry)
        else:
            print "failed-------url=[%s],retry=[%d]"%(url,retry)


    def parseUrl(self,content):
        doc = html.fromstring(content)
        tagA = doc.xpath('//ul[@class="searcher-job-list "]/li/a')
        url_count = 0
        for a in tagA:
            href = a.attrib.get('href',None)
            if href is not None:
                self.job_url.append("http://www.jobui.com"+href)
                url_count+=1
        print 'parse url count [%d]'%url_count
        self.cnt += url_count
        #self.parseDomain(content)
        return url_count

    def parseDomain(self,content):
        m = re.search(ur'<em class="sourceWeb common-icon"></em>(.*)</dd>',content)
        if m:
            dm_str = m.group(1)
            m1 = re.search(ur'<a class="no-style fwb " rel="nofllow" target="_blank" href="(.*)" onclick="_hmt.push\(\[\'_trackEvent\', \'jobInfo\', \'jobInfo_info\',\'jobInfo_info_jobSourceWeb\'\]\);">(.*)</a>',dm_str)
            if m1:
                dm_str = m1.group(2)
            dm = []
            dm.append('"'+dm_str+'"')
            if dm in domain:
                print '[%s] already in domains...'%dm_str
            else:
                self.domains.append('"'+dm_str+'"')
                domain.append(dm)
                print '[%s] add to domains...'%dm_str
        else:
            print 'no match domain...'

    def process_failed_url(self, params):
        self.bs2.append(self.gen_url(params))
        return False

    def log_url(self, params):
        url = self.gen_url(params)
        self.fs.append(url)
        return True

    def gen_url(self, p):
        url = "http://www.jobui.com/jobs?jobKw=&cityKw=全国"
        for i in p:
            url = self.compose_url(url, i, p[i])
        return url

    def event_handler(self, evt, msg, **kwargs):
        if evt == 'DONE':
            msg += '\n genq_add.py is stoped , use time:'+str(time.time()-self.start_time)+';  get new count :'+str(self.cnt)
            print msg
            spider.util.sendmail('chentao@ipin.com', '%s DONE' % sys.argv[0], msg)
        if evt == 'STARTED':
            spider.util.sendmail('chentao@ipin.com', '%s STARTED' % sys.argv[0], 'genq_add.py is start~')

if __name__ == "__main__":
    if os.path.exists('failed_urls.txt'):
        os.remove('failed_urls.txt')

    if os.path.exists('job_url.txt'):
        os.remove('job_url.txt')

    if os.path.exists('not_match_jobui_queries.txt'):
        os.remove('not_match_jobui_queries.txt')

    if os.path.exists('res.jobui_queries.txt'):
        os.remove('res.jobui_queries.txt')

    g = GenJobQuery(1)
    g.run()
    #print 'cnt=%d---test=%d---sub=%d'%(g.cnt,g.test,(g.cnt-g.test))
    #print Decimal((g.cnt-g.test))/Decimal(g.cnt)
