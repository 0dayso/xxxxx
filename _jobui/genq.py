#!/usr/bin/env python
# -*- coding:utf8 -*-

import os
import sys

import spider
from spider.savebin import FileSaver
from spider.genquery import GenQueries, GQDataHelper
import re
import copy
#来源网站
domain = GQDataHelper.qlist("百城招聘","英才网联","厦门人才网","卓博人才网","智通人才网","拉勾网","猎聘网","中国医疗人才网","36人才","云南招聘网","中国人才热线","河南九博人才网","中国汽车人才网","海峡人才网","江西人才人事网","百才招聘","中国美容人才热线","河北搜才网")
#公司性质
companyType = GQDataHelper.qlist("其他性质","民营企业","外资","合资","国企","事业单位","国家机关")
#xue历要求
degreeType = GQDataHelper.qlist("初中","高中","中技","中专","大专","本科","硕士","博士","不限学历")
#工作经验
experienceType = GQDataHelper.qlist("应届毕业生","0-2年","3-5年","6-7年","8-10年","不限经验")
#行业类型
industry = GQDataHelper.qlist("快速消费品(食品、饮料、化妆品)","贸易/进出口","互联网/电子商务","电子技术/半导体/集成电路","专业服务(咨询、人力资源、财会)","计算机软件","新能源" ,"批发/零售","服装/纺织/皮革","汽车及零配件","金融/投资/证券","外包服务","制药/生物工程","房地产" ,"交通/运输/物流","教育/培训/院校","机械/设备/重工","家具/家电/玩具/礼品","中介服务","通信/电信/网络设备")
#职位类型
jobType = GQDataHelper.qlist("全职","兼职","临时","实习","不限职位")
#薪酬水平
payType = GQDataHelper.qlist("2000以下","2000-2999","3000-4499","4500-5999","6000-7999","8000-9999","10000-14999","15000-19999","20000-29999","30000-49999","面议")
#地域
#cityKw = GQDataHelper.qlist("深圳","广州","东莞","佛山","惠州","中山","珠海","江门","汕头","揭阳","潮州","湛江","清远","肇庆","阳江","茂名","河源","韶关","梅州","汕尾","云浮","合肥","芜湖","蚌埠","马鞍山","滁州","六安","阜阳","安庆","宿州","黄山","宣城","淮南","亳州","淮北","铜陵","池州","巢湖厦门","福州","泉州","漳州","莆田","宁德","龙岩","南平","三明","兰州","天水","酒泉","武威","白银","庆阳","张掖","陇南","平凉","定西","金昌","嘉峪关","甘南","临夏","南宁","柳州","桂林","北海","钦州","玉林","梧州","贵港","防城港","百色","贺州","河池","崇左","来宾","贵阳","遵义","毕节","六盘水","铜仁","安顺","黔南","黔西","黔东","三亚","海口","石家庄","保定","廊坊","唐山","张家口","衡水","邢台","秦皇岛","邯郸","沧州","承德","哈尔滨","大庆","齐齐哈尔","佳木斯","牡丹江","绥化","双鸭山","鸡西","鹤岗","七台河","伊春","黑河","大兴安岭","郑州","洛阳","新乡","南阳","信阳","驻马店","安阳","开封","许昌","漯河","焦作","平顶山","商丘","周口","濮阳","鹤壁","济源","三门峡","武汉","黄石","宜昌","仙桃","荆州","孝感","咸宁","荆门","恩施","黄冈","十堰","随州","鄂州","潜江","天门","襄樊","长沙","湘潭","株洲","郴州","衡阳","常德","岳阳","益阳","邵阳","永州","娄底","怀化","张家界","湘西","南京","苏州","无锡","常州","南通","镇江","宿迁","徐州","扬州","连云港","盐城","泰州","淮安","南昌","景德镇","九江","赣州","宜春","上饶","萍乡","鹰潭","吉安","抚州","新余","长春","吉林","松原","四平","延边","白山","通化","辽源","白城","朝阳","沈阳","大连","鞍山","营口","抚顺","盘锦","丹东","锦州","铁岭","辽阳","阜新","本溪","葫芦岛","呼和浩特","包头","鄂尔多斯","赤峰","通辽","兴安","锡林郭勒","呼伦贝尔","乌海","乌兰察布","巴彦淖尔","阿拉善","银川","吴忠","石嘴山","中卫","固原","海南","西宁","海西","海东","海北","玉树","青岛","济南","烟台","菏泽","潍坊","临沂","淄博","威海","济宁","东营","滨州","泰安","德州","聊城","日照","枣庄","莱芜","西安","汉中","咸阳","宝鸡","渭南","榆林","延安","安康","商洛","铜川","太原","大同","晋中","运城","临汾","长治","晋城","吕梁","忻州","朔州","阳泉","成都","绵阳","德阳","南充","泸州","乐山","眉山","宜宾","广元","遂宁","广安","内江","达州","自贡","巴中","攀枝花","雅安","资阳","凉山","阿坝","甘孜","乌鲁木齐","昌吉","巴音郭楞","哈密","喀什","克拉玛依","阿克苏","吐鲁番","伊犁","和田","阿勒泰","石河子","山南","拉萨","日喀则","昆明","大理","楚雄","文山","曲靖","红河","玉溪","丽江","西双版纳","昭通","普洱","保山","临沧","德宏","迪庆","怒江","杭州","宁波","温州","金华","嘉兴","台州","绍兴","湖州","舟山","衢州","丽水")

cityKw = [["深圳"],["广州"],["东莞"],["佛山"],["惠州"],["中山"],["珠海"],["江门"],["汕头"],["揭阳"],["潮州"],["湛江"],["清远"],["肇庆"],["阳江"],["茂名"],["河源"],["韶关"],["梅州"],["汕尾"],["云浮"],["合肥"],["芜湖"],["蚌埠"],["马鞍山"],["滁州"],["六安"],["阜阳"],["安庆"],["宿州"],["黄山"],["宣城"],["淮南"],["亳州"],["淮北"],["铜陵"],["池州"],["巢湖厦门"],["福州"],["泉州"],["漳州"],["莆田"],["宁德"],["龙岩"],["南平"],["三明"],["兰州"],["天水"],["酒泉"],["武威"],["白银"],["庆阳"],["张掖"],["陇南"],["平凉"],["name"],["'i'"],["is"],["not"],["defined定西"],["金昌"],["嘉峪关"],["甘南"],["临夏"],["南宁"],["柳州"],["桂林"],["北海"],["钦州"],["玉林"],["梧州"],["贵港"],["防城港"],["百色"],["贺州"],["河池"],["崇左"],["来宾"],["贵阳"],["遵义"],["毕节"],["六盘水"],["铜仁"],["安顺"],["黔南"],["黔西"],["黔东"],["三亚"],["海口"],["石家庄"],["保定"],["廊坊"],["唐山"],["张家口"],["衡水"],["邢台"],["秦皇岛"],["邯郸"],["沧州"],["承德"],["哈尔滨"],["大庆"],["齐齐哈尔"],["佳木斯"],["牡丹江"],["绥化"],["双鸭山"],["鸡西"],["鹤岗"],["七台河"],["伊春"],["黑河"],["大兴安岭"],["郑州"],["洛阳"],["新乡"],["南阳"],["信阳"],["驻马店"],["安阳"],["开封"],["许昌"],["漯河"],["焦作"],["平顶山"],["商丘"],["周口"],["濮阳"],["鹤壁"],["济源"],["三门峡"],["武汉"],["黄石"],["宜昌"],["仙桃"],["荆州"],["孝感"],["咸宁"],["荆门"],["恩施"],["黄冈"],["十堰"],["随州"],["鄂州"],["潜江"],["天门"],["襄樊"],["长沙"],["湘潭"],["株洲"],["郴州"],["衡阳"],["常德"],["岳阳"],["益阳"],["邵阳"],["永州"],["娄底"],["怀化"],["张家界"],["湘西"],["南京"],["苏州"],["无锡"],["常州"],["南通"],["镇江"],["宿迁"],["徐州"],["扬州"],["连云港"],["盐城"],["泰州"],["淮安"],["南昌"],["景德镇"],["九江"],["赣州"],["宜春"],["上饶"],["萍乡"],["鹰潭"],["吉安"],["抚州"],["新余"],["长春"],["吉林"],["松原"],["四平"],["延边"],["白山"],["通化"],["辽源"],["白城"],["朝阳"],["沈阳"],["大连"],["鞍山"],["营口"],["抚顺"],["盘锦"],["丹东"],["锦州"],["铁岭"],["辽阳"],["阜新"],["本溪"],["葫芦岛"],["呼和浩特"],["包头"],["鄂尔多斯"],["赤峰"],["通辽"],["兴安"],["锡林郭勒"],["呼伦贝尔"],["乌海"],["乌兰察布"],["巴彦淖尔"],["阿拉善"],["银川"],["吴忠"],["石嘴山"],["中卫"],["固原"],["海南"],["西宁"],["海西"],["海东"],["海北"],["玉树"],["青岛"],["济南"],["烟台"],["菏泽"],["潍坊"],["临沂"],["淄博"],["威海"],["济宁"],["东营"],["滨州"],["泰安"],["德州"],["聊城"],["日照"],["枣庄"],["莱芜"],["西安"],["汉中"],["咸阳"],["宝鸡"],["渭南"],["榆林"],["延安"],["安康"],["商洛"],["铜川"],["太原"],["大同"],["晋中"],["运城"],["临汾"],["长治"],["晋城"],["吕梁"],["忻州"],["朔州"],["阳泉"],["成都"],["绵阳"],["德阳"],["南充"],["泸州"],["乐山"],["眉山"],["宜宾"],["广元"],["遂宁"],["广安"],["内江"],["达州"],["自贡"],["巴中"],["攀枝花"],["雅安"],["资阳"],["凉山"],["阿坝"],["甘孜"],["乌鲁木齐"],["昌吉"],["巴音郭楞"],["哈密"],["喀什"],["克拉玛依"],["阿克苏"],["吐鲁番"],["伊犁"],["和田"],["阿勒泰"],["石河子"],["山南"],["拉萨"],["日喀则"],["昆明"],["大理"],["楚雄"],["文山"],["曲靖"],["红河"],["玉溪"],["丽江"],["西双版纳"],["昭通"],["普洱"],["保山"],["临沧"],["德宏"],["迪庆"],["怒江"],["杭州"],["宁波"],["温州"],["金华"],["嘉兴"],["台州"],["绍兴"],["湖州"],["舟山"],["衢州"],["丽水"]]

def parseInt(s):
    m = re.match("\s*([0-9]+)", s)
    if m:
        return int(m.group(1))
    raise ValueError("invalid string %s to int" % s)


class GenJobQuery(GenQueries):
    def __init__(self):
        GenQueries.__init__(self)
        self.thread_count = 1
        self._name = "jobui_queries"

    def init_conditions(self):
        GQDataHelper.add(self, 'companyType', companyType)
        GQDataHelper.add(self, 'degreeType', degreeType)
        GQDataHelper.add(self, 'experienceType', experienceType)
        GQDataHelper.add(self, 'industry', industry)
        GQDataHelper.add(self, 'jobType', jobType)
        GQDataHelper.add(self, 'payType', payType)
        GQDataHelper.add(self, 'cityKw', cityKw)
        self.bs2 = FileSaver("failed_urls.txt")

    def need_split(self, params, level, islast):
        url = self.gen_url(params)
        con = self.request_url(url)
        if con is not None:
            #m = re.search(ur"(?:共|多于)<em>(\d+)</em>个职位满足条件", con.text)
            m = re.search(ur'<small class="info">&nbsp;（(\d+) 条信息）</small>',con.text)
            if m:
                found = m.group(1).encode('utf-8')
                #print 'get count == ',found
                count = parseInt(found)
                with self.locker:
                    print "[%d] %s ==> %s %s" % (level, url, found, 'failed' if (count >= 1000) else '')
                if parseInt(found) >= 1000:
                    return True
                else:
                    return False
        with self.locker:
            self.bs2.append("==failed get con: %s====" % url)
            print "===%s===" % url
            #print con.text
        return False

    def process_failed_url(self, params):
        self.bs2.append(self.gen_url(params))
        return False

    def log_url(self, params):
        url = self.gen_url(params)
        self.fs.append(url)
        return True

    def gen_url(self, p):
        url = "http://www.jobui.com/jobs?jobKw=&cityKw=全国"
        for i in p:
            url = self.compose_url(url, i, p[i])
        return url

if __name__ == "__main__":
    g = GenJobQuery()
    g.run()
