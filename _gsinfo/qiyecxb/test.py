#!/usr/bin/env python
# -*- coding:utf8 -*-

import os
import sys
sys.path.append(sys.path[0]+"/..")
from spider.spider import Spider
from spider.httpreq import SessionRequests, CurlReq
import spider.util
import pycurl
import cutil
import json
import abc
from spider.runtime import Log
import time
import base64
from Crypto.Cipher import AES

class CCIQ_AES:
    def __init__( self, key = None ):
        self.key = key
        if self.key is None:
            self.key = "9BF70E91907CA25135B36B5328AF36C4"
        BS = 16
        self.pad = lambda s: s + (BS - len(s) % BS) * chr(BS - len(s) % BS)
        self.unpad = lambda s : s[:-ord(s[len(s)-1:])]

    def encrypt(self, raw):
        iv = "\0" * 16
        raw = self.pad(raw)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return base64.b64encode(cipher.encrypt(raw))

    def decrypt( self, enc ):
        iv = "\0" * 16
        enc = base64.b64decode(enc)
        cipher = AES.new(self.key, AES.MODE_CBC, iv)
        return self.unpad(cipher.decrypt(enc))


#req = {"encryptedJson":"ZlWT15DsXFm0Y4QnYoK2ufXYi39Plo9\/yhwguqs9FWAHRqkKsKobDI+ai8+GR4NTJNeaHC7hDsivmsbOkOQ\/0lHsES3Wl5kF+pLW98YratGzlf4Tc5qnXiNDVUrc0WaqJD8obqeFhJLQsocfxB8REE6XpIbzthyB+CHX3TQpcJskJEZkJOyPxRdg9PTsCjTLPmgNHuWq3fSNyd3DpR6RIl\/AJNb+Ex70Uf0QDarg3koMErtDXwvcnEtxblp3kaMu2QmXxnDbkClaGASOP6ZsuKgVu6LXdW\/KOHk6cP+\/tEQ=","extJson":"Hoi6oX70l9whauZmjq8jVAmoe3UspXXhX9mPG+KAeqs1rKZVr\/uapICH92P\/CrrycI\/OjobbzuafHXthwGM38\/RMXUoOjROK+Psk7SCSv2\/vBYNK3RYrJk26Fgu1HxLDg9LWqdILYeoDE2G3IezMHPYyzrU1yEoFGenXS1U8gvc="}

req = {'encryptedJson': 'j4kzTnVqwSoHC8BLgjy0n5nZl1zDkMKA3NY4NVwFfL+65BzsXkmfBvobIYdT04u/Gnyzr5ku9XUk0lJLny6uOx9z0pYqJ7cqA+KQPlb5sjJP1aBtfQPKAwFe1KEe35yy3uk8dChwBgt2Gaefubx1qb3dNP7DIyiplJ2q3WEOuvqAmIZRKet6MSds5NRzb5Kugp0IUN2kRqO10jdv+ILkem8pU9ZNxRFaqlpG+d/x5c0ouiCroEudVE50RN03eXxI/+HSudcalTJ82iWGtK/3LC8vHYl8hqz+jUai3L37/VDN65BRAEezpd7zxibNjwMf', 'extJson': 'O3wNDhI0rBOcBnMa0PfzrrQ9CVUtEGW4+4ryKQpX3Q3LSTt2psf0V8gzYq5CObmvolnCfTl8Amfk6qUIRulQqbX7Vi/hzCI44sUJE/vx8XmDT2whbjcnJFx9mmf3lAkTmWe9lQO6AfC+pxWodDf8Og=='}

vv = {"c":"","v":"m2JSqrBtIXdQ4Vq6LTC1kw==","m":"BsRioKDdMi3oPdq2Klc/Bw=="}

if __name__ == '__main__':
    # for n, v in req.items():
    #     print n, "=", CCIQ_AES().decrypt(v)
    # print '----------------------------------'
    # for n in ["v", "m"]: #, "c"
    #     o = CCIQ_AES().decrypt(vv[n])
    #     print n, "=", len(o), o
    # print '----------------------------------'
    # o = CCIQ_AES("BB1856A312580D41256311147089E0CC").decrypt(vv['c'])
    # print len(o), o

    encryptedJson = {
        "pagesize" : "20",
        "page" : "1",
        "od_orderBy" : "0",
        "sh_searchType" : "一般搜索",
        "od_statusFilter" : "0",
         "v1" : "QZOrgV004",
        "oc_name" : "腾讯",
        "sh_u_uid" : "",
        "sh_u_name" : ""
    }
    extJson = {
        "cl_screenSize" : "640x960",
        "cl_cookieId" : "16923697-D73E-485A-BDCF-68FAD456AC02",
        "Org_iOS_Version" : "2.0.1"
    }
    param = {"encryptedJson": CCIQ_AES().encrypt(encryptedJson.__str__()), "extJson": CCIQ_AES().encrypt(extJson.__str__())}
    print param